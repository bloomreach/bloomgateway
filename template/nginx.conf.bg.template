#
# Copyright 2016 BloomReach, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# global settings
worker_processes  4;
pid /var/run/bloomgateway.openresty.pid;
error_log /var/log/bloomgateway/err.log debug;
events {
    worker_connections 1024;
}

# http settings
http {
  # google public dns resolver
  resolver 8.8.8.8 valid=10s;

  # default tcp settings
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;

  # mime type settings
  include mime.types;
  default_type application/octet-stream;

  # logs settings
  log_format timed_combined '$$remote_addr - $$remote_user [$$time_local]  '
                '"$$request" $$status $$body_bytes_sent '
                '"$$http_referer" "$$http_user_agent" '
                'req_time:$$request_time';

  access_log /var/log/bloomgateway/access.log timed_combined;
  error_log /var/log/bloomgateway/error.log;

  # gzip settings
  gzip on;
  gzip_disable "msie6";
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  # set url length
  large_client_header_buffers 8 64k;

  # including real IP
  real_ip_header X-Forwarded-For;
  set_real_ip_from 0.0.0.0/0;
  real_ip_recursive on;

  # global lua settings
  lua_package_path ';;$${prefix}../bb/lualib/?.lua;';
  lua_shared_dict shared_mem 10m;
  lua_shared_dict config_locks 100k;
  lua_max_pending_timers 2;
  lua_max_running_timers 2;

  init_by_lua '
    bb = require "bb.core.gatekeeper";
    bb.init();
  ';

  init_worker_by_lua '
    local pull = require "bb.core.pull"
    pull.init()
  ';

  # upstream server settings
  upstream app_server {
    server $upstream_server fail_timeout=0;
  }

  # default server config
  server {
    listen $service_port;

    # api entry point
    location / {
      # access phase settings
      set $$upstream_endpoint app_server;
      access_by_lua 'bb.exec("access");';

      # proxy settings
      proxy_set_header Host $$host;
      proxy_set_header X-Real-IP $$remote_addr;
      proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;

      proxy_redirect off;
      proxy_connect_timeout 200ms;
      proxy_read_timeout 2s;
      proxy_intercept_errors on;
      recursive_error_pages on;

      # proxy request with http 1.1
      proxy_http_version 1.1;
      proxy_pass http://$$upstream_endpoint;

      # error page settings for proxy
      error_page 500 = @error_500;
      error_page 502 = @error_502;
      error_page 503 = @error_503;
      error_page 504 = @error_504;
    }

    # handling error via fallback module
    location @error_500 {
      internal;
      content_by_lua '
        ngx.status=500
        bb.exec("error");';
    }
    location @error_502 {
      internal;
      content_by_lua '
        ngx.status=502
        bb.exec("error");';
    }
    location @error_503 {
      internal;
      content_by_lua '
        ngx.status=503
        bb.exec("error");';
    }
    location @error_504 {
      internal;
      content_by_lua '
        ngx.status=504
        bb.exec("error");';
    }
  }

  # config and status handler
  server {
    listen $ping_port;
      location /update/config {
        default_type text/html;
        content_by_lua 'bb.handler();';
      }
      location /status {
        default_type text/html;
        content_by_lua '
          local pull = require "bb.core.pull"
          ngx.say(pull.config())
        ';
      }
  }

  # upstream server end point for testing purpose
  server {
    listen 6072;
      location / {
        default_type text/html;
        content_by_lua 'ngx.say("ok")';
      }
      location /fallback {
        default_type text/html;
        content_by_lua '
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.exit(ngx.status)
        ';
      }
  }
  # fallback and router server end-point for testing
  server {
    listen 6073;
      location / {
        default_type text/html;
        content_by_lua 'ngx.say("ok")';
      }
      location /fallback {
        default_type text/html;
        content_by_lua 'ngx.say("Fallback Status Success!!")';
      }
  }

  # include bloomique settings
  include conf.d/*.conf;
}
